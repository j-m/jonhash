charbits: 8
input: ABCEFG
input: 010000010100001001000011010001010100011001000111
c1: 01000001 
c2: 01000010
c3: 01000011
c4: 01000101
c5: 01000110
c6: 01000111

shift: 17 (number of 1s in input)
01000001010000100
                 1000011010001010100011001000111
100001101000101010001100100011101000001010000100

OR

charactershifts: 17/charbits
   =17/8
   =2
01000001 01000010
                  01000011 01000101 01000110 01000111
01000011 01000101 01000110 01000111 01000001 01000010

AND

bitshifts: 17-charbits*charactershifts
   = 17-8*2
   = 1

cn: (char)(cn+charactershifts << bitshifts) + (cn+charactershifts+1 >> charbits-bitshifts)
c1 = (char)(01000011 << 1) + ((01000101 >> 8-1) & ((2^^1)-1)
   = 10000110 

c2 = (char)(01000101 << 1) + ((01000110 >> 8-1) & ((2^^1)-1)
   = 10001010

c3 = (char)(01000110 << 1) + ((01000111 >> 8-1) & ((2^^1)-1)
   = 10001100

.
.
.

10000110 10001010 10001100 10001110 10000010 10000100




printf("%d, %d",'A', (char)('A' << 8)): "65, 0"